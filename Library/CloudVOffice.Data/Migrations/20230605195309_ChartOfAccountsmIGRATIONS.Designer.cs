// <auto-generated />
using System;
using CloudVOffice.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudVOffice.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230605195309_ChartOfAccountsmIGRATIONS")]
    partial class ChartOfAccountsmIGRATIONS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            AccountTypeName = "Accumulated Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7083),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 2,
                            AccountTypeName = "Asset Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7084),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 3,
                            AccountTypeName = "Bank",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7086),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 4,
                            AccountTypeName = "Cash",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7087),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 5,
                            AccountTypeName = "Chargeable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7088),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 6,
                            AccountTypeName = "Capital Work in Progress",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7089),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 7,
                            AccountTypeName = "Cost of Goods Sold",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7090),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 8,
                            AccountTypeName = "Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7091),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 9,
                            AccountTypeName = "Equity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7092),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 10,
                            AccountTypeName = "Expense Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7093),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 11,
                            AccountTypeName = "Expenses Included In Asset Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7094),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 12,
                            AccountTypeName = "Expenses Included In Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7095),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 13,
                            AccountTypeName = "Fixed Asset",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7096),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 14,
                            AccountTypeName = "Income Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7097),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 15,
                            AccountTypeName = "Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7098),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 16,
                            AccountTypeName = "Receivable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7099),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 17,
                            AccountTypeName = "Round Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7100),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 18,
                            AccountTypeName = "Stock",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7101),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 19,
                            AccountTypeName = "Stock Adjustment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7102),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 20,
                            AccountTypeName = "Stock Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7103),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 21,
                            AccountTypeName = "Service Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7104),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 22,
                            AccountTypeName = "Tax",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7105),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 23,
                            AccountTypeName = "Temporary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7106),
                            Deleted = false
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.Property<int>("ChartOfAccountsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChartOfAccountsId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BalanceMustBe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChartOfAccountsId1")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentAccountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TaxRate")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChartOfAccountsId");

                    b.HasIndex("ChartOfAccountsId1");

                    b.ToTable("ChartOfAccounts");

                    b.HasData(
                        new
                        {
                            ChartOfAccountsId = 1,
                            AccountName = "Application of Funds (Assets)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7258),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 2,
                            AccountName = "Current Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7262),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 3,
                            AccountName = "Accounts Receivable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7264),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 4,
                            AccountName = "Debtors",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7266),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 3,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 5,
                            AccountName = "Bank Accounts",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7268),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 6,
                            AccountName = "Cash In Hand",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7269),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 7,
                            AccountName = "Cash",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7342),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 6,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 8,
                            AccountName = "Loans and Advances (Assets)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7344),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 9,
                            AccountName = "Securities and Deposits",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7346),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 10,
                            AccountName = "Earnest Money",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7348),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 9,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 11,
                            AccountName = "Stock Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7351),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 12,
                            AccountName = "Stock In Hand",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7353),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 11,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 13,
                            AccountName = "Tax Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7354),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 14,
                            AccountName = "Fixed Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7356),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 15,
                            AccountName = "Accumulated Depreciations",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7358),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 16,
                            AccountName = "Accumulated Depreciations",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7360),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 17,
                            AccountName = "Buildings",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7362),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 18,
                            AccountName = "Capital Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7363),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 19,
                            AccountName = "Electronic Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7365),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 20,
                            AccountName = "Furnitures and Fixtures",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7368),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 21,
                            AccountName = "Office Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7370),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 22,
                            AccountName = "Plants and Machineries",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7372),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 23,
                            AccountName = "Investments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7373),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 24,
                            AccountName = "Temporary Accounts",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7375),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 25,
                            AccountName = "Temporary Opening",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7377),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 24,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 26,
                            AccountName = "Source of Funds (Liabilities)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7379),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 27,
                            AccountName = "Capital Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7381),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 26,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 28,
                            AccountName = "Reserves and Surplus",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7382),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 27,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 29,
                            AccountName = "Shareholders Funds",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7385),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 27,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 30,
                            AccountName = "Current Liabilities",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7387),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 26,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 31,
                            AccountName = "Accounts Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7389),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 32,
                            AccountName = "Creditors",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7390),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 31,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 33,
                            AccountName = "Payroll Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7392),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 31,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 34,
                            AccountName = "Duties and Taxes",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7394),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 35,
                            AccountName = "TDS",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7396),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 34,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 36,
                            AccountName = "Loans (Liabilities)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7400),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 37,
                            AccountName = "Bank Overdraft Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7402),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 38,
                            AccountName = "Secured Loans",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7404),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 39,
                            AccountName = "Unsecured Loans",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7406),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 40,
                            AccountName = "Stock Liabilities",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7408),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 41,
                            AccountName = "Stock Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7412),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 40,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 42,
                            AccountName = "Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7414),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 43,
                            AccountName = "Direct Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7416),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 42,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 44,
                            AccountName = "Sales",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7417),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 43,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 45,
                            AccountName = "Service",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7419),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 43,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 46,
                            AccountName = "Indirect Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7421),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 42,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 47,
                            AccountName = "Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7424),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 48,
                            AccountName = "Direct Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7425),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 47,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 49,
                            AccountName = "Stock Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7427),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 48,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 50,
                            AccountName = "Cost of Goods Sold",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7429),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 51,
                            AccountName = "Expenses Included In Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7431),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 52,
                            AccountName = "Stock Adjustment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7432),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 53,
                            AccountName = "Indirect Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7434),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 47,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 54,
                            AccountName = "Administrative Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7436),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 55,
                            AccountName = "Commission on Sales",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7438),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 56,
                            AccountName = "Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7440),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 57,
                            AccountName = "Entertainment Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7442),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 58,
                            AccountName = "Exchange Gain/Loss",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7444),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 59,
                            AccountName = "Freight and Forwarding Charges",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7446),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 60,
                            AccountName = "Gain/Loss on Asset Disposal",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7450),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 61,
                            AccountName = "Legal Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7531),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 62,
                            AccountName = "Marketing Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7533),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 63,
                            AccountName = "Miscellaneous Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7535),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 64,
                            AccountName = "Office Maintenance Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7539),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 65,
                            AccountName = "Office Rent",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7541),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 66,
                            AccountName = "Postal Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7543),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 67,
                            AccountName = "Print and Stationary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7544),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 68,
                            AccountName = "Rounded Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7546),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 69,
                            AccountName = "Salary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7548),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 70,
                            AccountName = "Sales Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7550),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 71,
                            AccountName = "Telephone Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7552),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 72,
                            AccountName = "Travel Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7553),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 73,
                            AccountName = "Utility Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7555),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 74,
                            AccountName = "Write Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(7557),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.FinancialYear", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialYearId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinancialYearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyDetailsId"));

                    b.Property<string>("ABBR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDetailsId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.LetterHead", b =>
                {
                    b.Property<int>("LetterHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterHeadId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LetterHeadAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LetterHeadId");

                    b.ToTable("LetterHeads");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.Property<int>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAccountId"));

                    b.Property<string>("AlternativeEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("EmailAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultSending")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAccountId");

                    b.HasIndex("Domain");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailDomain", b =>
                {
                    b.Property<int>("EmailDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailDomainId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncomingIsIMAP")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsStartTLs")
                        .HasColumnType("bit");

                    b.Property<int>("IncomingPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutgoingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("OutgoingIsTLs")
                        .HasColumnType("bit");

                    b.Property<int>("OutgoingPort")
                        .HasColumnType("int");

                    b.Property<string>("OutingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailDomainId");

                    b.ToTable("EmailDomains");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.Property<long>("DesktopActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopActivityLogId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppOrWebPageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("DesktopLoginId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessOrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Todatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopActivityLogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DesktopActivityLogs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopKeyStroke", b =>
                {
                    b.Property<long>("DesktopKeyStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopKeyStrokeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("DesktopActivityLogId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("KeyStrokeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keystrokes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopKeyStrokeId");

                    b.HasIndex("DesktopActivityLogId");

                    b.ToTable("DesktopKeyStrokes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopLogin", b =>
                {
                    b.Property<long>("DesktopLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopLoginId"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("IdelTime")
                        .HasColumnType("time");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActiveSession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoLogedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LogOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopLoginId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DesktopLogins");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopSnapshot", b =>
                {
                    b.Property<long>("DesktopSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopSnapshotId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DesktopActivityLogId")
                        .HasColumnType("int");

                    b.Property<long>("DesktopActivityLogId1")
                        .HasColumnType("bigint");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapShot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SnapshotDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopSnapshotId");

                    b.HasIndex("DesktopActivityLogId1");

                    b.ToTable("DesktopSnapshots");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("DefaultSendingAccount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailTemplateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6935),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\">\r\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">{%welcometitle%} </h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table border=\"0\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\"><span style=\"color:rgb(22,123,158); font-size:16px; margin-right:2px; font-weight:600\"></span>{%helloname%}</h5>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%accountcreatetionmessage%}</p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%loginidmessage%}</p>\r\n\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%aditionalmessage%}</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br />\r\n                                                                                {%copylinkfrommessage%}\r\n                                                                            </div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"></div> </div></span>\r\n</div>",
                            EmailTemplateName = "WelcomeEmail",
                            Subject = ""
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<string>("BiometricOrRfIdDeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CTC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<long>("ErpUser")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("JobApplicantId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MarraigeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoticePeriodDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PanNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportPlaceOfIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportValidUpto")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvidentFundAccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationWithEmergencyContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportingAuthority")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RetirementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.EmployeeEducationalQualification", b =>
                {
                    b.Property<long>("EmployeeEducationalQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeEducationalQualificationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolOrUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearOfPassing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeEducationalQualificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducationalQualifications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesignationId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmploymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 10000L);

                    b.Property<int?>("ApplicationId1")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationId1");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Applications",
                            AreaName = "Application",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5532),
                            Deleted = false,
                            IconImageUrl = "/appstatic/images/applications.png",
                            IsGroup = true,
                            Url = "/Application/Applications/InstalledApps"
                        },
                        new
                        {
                            ApplicationId = 2,
                            ApplicationName = "Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5537),
                            Deleted = false,
                            IconImageUrl = "/appstatic/images/setup.png",
                            IsGroup = true,
                            Url = "/Setup/Setup/Dashboard"
                        },
                        new
                        {
                            ApplicationId = 3,
                            ApplicationName = "Company Settings",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5539),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 4,
                            ApplicationName = "Company",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5540),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/CompanyDetails/CompanyDetailsView"
                        },
                        new
                        {
                            ApplicationId = 5,
                            ApplicationName = "Letter Head",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5542),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/LetterHead/LetterHeadView"
                        },
                        new
                        {
                            ApplicationId = 6,
                            ApplicationName = "User",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5543),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 7,
                            ApplicationName = "User List",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5545),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 6,
                            Url = "/Setup/User/UserList"
                        },
                        new
                        {
                            ApplicationId = 8,
                            ApplicationName = "Email Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5546),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 9,
                            ApplicationName = "Domain",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5548),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailDomain/EmailDomainView"
                        },
                        new
                        {
                            ApplicationId = 10,
                            ApplicationName = "Email Account",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(5549),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailAccount/EmailAccountView"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.InstalledApplication", b =>
                {
                    b.Property<int>("InstalledApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstalledApplicationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("InstalledApplicationId");

                    b.ToTable("InstalledApplications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.Property<long>("RoleAndApplicationWisePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleAndApplicationWisePermissionId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleAndApplicationWisePermissionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAndApplicationWisePermissions");

                    b.HasData(
                        new
                        {
                            RoleAndApplicationWisePermissionId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6104),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6107),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6147),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6148),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6149),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6150),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6152),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6153),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6154),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6156),
                            Deleted = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.Property<long>("UserWiseViewMapperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserWiseViewMapperId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserWiseViewMapperId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWiseViewMappers");

                    b.HasData(
                        new
                        {
                            UserWiseViewMapperId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6669),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6672),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6674),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6675),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6677),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6679),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6680),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6681),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6682),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(6683),
                            Deleted = false,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CompleteMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedCost")
                        .HasColumnType("float");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectManager")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("SalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectManager");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectActivityType", b =>
                {
                    b.Property<int>("ProjectActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectActivityTypeId"));

                    b.Property<string>("ActivityCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProjectActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectActivityTypeId");

                    b.ToTable("ProjectActivityTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectEmployee", b =>
                {
                    b.Property<long>("ProjectEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectEmployeeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.Property<long?>("ProjectTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("ProjectTaskId"));

                    b.Property<long?>("AssignedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ComplitedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ComplitedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DelayApprovalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DelayApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DelayApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpectedTimeInHours")
                        .HasColumnType("float");

                    b.Property<int?>("IsDelayApproved")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Progress")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TaskComplitedByOthersReasonByAssign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskComplitedByOthersReasonByComplitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalBillableHourByTimeSheet")
                        .HasColumnType("float");

                    b.Property<double?>("TotalHoursByTimeSheet")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectTaskId");

                    b.HasIndex("ComplitedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProjectTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectUser", b =>
                {
                    b.Property<long>("ProjectUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectUserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TaskAssignment", b =>
                {
                    b.Property<long>("TaskAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskAssignmentId"));

                    b.Property<DateTime?>("ActualCompliteOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AssignedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CompliteBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DelayApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DelayApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDelayApproved")
                        .HasColumnType("bit");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskAssignmentId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CompliteBy");

                    b.HasIndex("DelayApprovedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignment");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Timesheet", b =>
                {
                    b.Property<long?>("TimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("TimesheetId"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DurationInHours")
                        .HasColumnType("float");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<double?>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("bit");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeSheetApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSheetApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeSheetApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeSheetForDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimesheetActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TimesheetApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimesheetId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TimesheetApprovedBy");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TimesheetActivityCategory", b =>
                {
                    b.Property<int>("TimesheetActivityCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimesheetActivityCategoryId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TimesheetActivityCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimesheetActivityCategoryId");

                    b.ToTable("TimesheetActivityCategories");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(3119),
                            Deleted = false,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpirey")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 6, 6, 1, 23, 8, 591, DateTimeKind.Local).AddTicks(4607),
                            Deleted = false,
                            Email = "admin@appman.in",
                            FirstName = "Administrator",
                            IsActive = true,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "",
                            Password = "r9NmU79/NE0x0el2cuI8PeI4GlVCdpOeB875sWPUeJw=",
                            PhoneNo = "9583000000",
                            UserType = 1,
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.Property<int>("UserRoleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleMappingId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleMappingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings");

                    b.HasData(
                        new
                        {
                            UserRoleMappingId = 1,
                            RoleId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", null)
                        .WithMany("Children")
                        .HasForeignKey("ChartOfAccountsId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Comunication.EmailDomain", "EmailDomain")
                        .WithMany()
                        .HasForeignKey("Domain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDomain");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopKeyStroke", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", "DesktopActivityLog")
                        .WithMany("DesktopKeyStrokes")
                        .HasForeignKey("DesktopActivityLogId");

                    b.Navigation("DesktopActivityLog");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopLogin", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopSnapshot", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", "DesktopActivityLog")
                        .WithMany("DesktopSnapshots")
                        .HasForeignKey("DesktopActivityLogId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesktopActivityLog");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.Employee", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.EmployeeEducationalQualification", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", null)
                        .WithMany("Children")
                        .HasForeignKey("DepartmentId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", null)
                        .WithMany("Children")
                        .HasForeignKey("ApplicationId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("RoleAndModuleWisePermission")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("RoleAndApplicationWisePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ProjectManager");

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectEmployee", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ComplitedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectUser", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TaskAssignment", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeAssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeCompliteBy")
                        .WithMany()
                        .HasForeignKey("CompliteBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeDelayApprovedBy")
                        .WithMany()
                        .HasForeignKey("DelayApprovedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectTask", "ProjectTask")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeAssignedBy");

                    b.Navigation("EmployeeCompliteBy");

                    b.Navigation("EmployeeDelayApprovedBy");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Timesheet", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectActivityType", "ProjectActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "TimesheetApprovedByEmployeeId")
                        .WithMany()
                        .HasForeignKey("TimesheetApprovedBy");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("ProjectActivityType");

                    b.Navigation("ProjectTask");

                    b.Navigation("TimesheetApprovedByEmployeeId");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.Navigation("DesktopKeyStrokes");

                    b.Navigation("DesktopSnapshots");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleAndModuleWisePermission");

                    b.Navigation("UserWiseViewMapper");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Navigation("RoleAndApplicationWisePermission");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoleMappings");

                    b.Navigation("UserWiseViewMapper");
                });
#pragma warning restore 612, 618
        }
    }
}
