@using System.Collections;
@using Newtonsoft.Json;
@model CloudVOffice.Data.DTO.Projects.ProjectDTO;
@{
	Layout = "_MainAppLayout";
	var DropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.Employees, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "EmployeeId", Text = "FullName" }, Change = "onChange" };


	var ProjectUsers = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.Users, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "UserId", Text = "FullName" }, Change = "onChangeUser" };


}
@addTagHelper *, Syncfusion.EJ2
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<header class="main-heading">
	<div class="container-fluid">
		<div class="row">
			<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
				<div class="page-icon">
					<i class="icon-laptop_windows"></i>
				</div>
				<div class="page-title">
					<h5>Projects</h5>
				</div>
			</div>
			<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
				<div class="right-actions">
					<span class="last-login">Last Login: 2 hours ago</span>
				</div>
			</div>
		</div>
	</div>
</header>

<div class="main-content">
	<div class="row gutters">
		<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
			<div class="card">
				<form asp-route="Projects/Project/ProjectCreate" method="post" autocomplete="off">
					<div asp-validation-summary="ModelOnly" class="message-error"></div>
					<div class="card-header"><b>New Project</b></div>
					<div class="card-body">
						<div class="form-row">
							<div class="form-group col-md-3">
								<input asp-for="@Model.ProjectId" type="hidden" />
								<span asp-validation-for="ProjectCode"></span>
							</div>
						</div>
						<div class="form-row">
							<div class="form-group col-md-3">
								<label for="ProjectCode" class="form-label">Project Code</label>
								<input asp-for="@Model.ProjectCode" type="text" class="form-control" autofocus="autofocus" placeholder="Project Code" />
								<span asp-validation-for="ProjectCode"></span>
							</div>
							<div class="form-group col-md-3">
								<label for="ProjectName" class="form-label">Project Name</label>
								<input asp-for="@Model.ProjectName" type="text" class="form-control" autofocus="autofocus" placeholder="Project Name" />
								<span asp-validation-for="ProjectName"></span>
							</div>
							<div class="form-group col-md-3">
								<label for="Status" class="form-label">Status</label>
								<select input asp-for="@Model.Status" type="text" class="form-control" autofocus="autofocus" placeholder="Status">
									<option value="Open">Open</option>
									<option value="Completed">Completed</option>
									<option value="Cancelled">Cancelled</option>
								</select>
							</div>
						</div>
						<div class="form-row">
							<div class="form-group col-md-3">
								<label for="StartDate" class="form-label">Start Date</label>
								<input asp-for="@Model.StartDate" type="date" class="form-control" autofocus="autofocus" placeholder="Start Date" />
								<span asp-validation-for="StartDate"></span>
							</div>
							<div class="form-group col-md-3">
								<label for="EndDate" class="form-label">End Date</label>
								<input asp-for="@Model.EndDate" type="date" class="form-control" autofocus="autofocus" placeholder="End Date" />
								<span asp-validation-for="EndDate"></span>
							</div>
							<div class="form-group col-md-3">
								<label for="ProjectTypeId" class="form-label">Project Type </label>
								<ejs-dropdownlist id="ProjectTypeId" allowFiltering="true" ejs-for="@Model.ProjectTypeId" filtering="onProjectTypefiltering" dataSource="@(new SelectList((IEnumerable)ViewBag.ProjectTypes, "ProjectTypeId", "ProjectTypeName").Items)" placeholder="Select a ProjectType" popupHeight="220px">
									<e-dropdownlist-fields text="ProjectTypeName" value="ProjectTypeId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="ProjectTypeId"></span>
							</div>
						</div>
						<div class="form-row">
							<div class="form-group col-md-3">
								<label for="Priority" class="form-label">Priority</label>
								<select input asp-for="@Model.Priority" type="text" class="form-control" autofocus="autofocus" placeholder="Priority">
									<option value="Medium">Medium</option>
									<option value="Low">Low</option>
									<option value="High">High</option>
								</select>
							</div>
							<div class="form-group col-md-3">
								<label for="CompleteMethod" class="form-label">Complete Method</label>
								<select input asp-for="@Model.CompleteMethod" type="text" class="form-control" autofocus="autofocus" placeholder="Complete Method">
									<option value="Manual">Manual</option>
									<option value="Task Completion">Task Completion</option>
									<option value="Task Progress">Task Progress</option>
									<option value="Task Weight">Task Weight</option>
								</select>
							</div>
							<div class="form-group col-md-3">
								<label for="ProjectManager" class="form-label">Project Manager</label>


								<ejs-dropdownlist id="ProjectManager" allowFiltering="true" ejs-for="@Model.ProjectManager" filtering="onProjectManagerfiltering" dataSource="@(new SelectList((IEnumerable)ViewBag.ProjectManager, "EmployeeId", "FullName").Items)" placeholder="Select a ProjectManager" popupHeight="220px">
									<e-dropdownlist-fields text="FullName" value="EmployeeId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="ProjectManager"></span>
							</div>
						</div>
					</div>
					<div class="card-header"><b>Customer Details </b></div>
					<div class="form-group col-md-3">
						<label for="SalesOrderId" class="form-label">Sales Order Id</label>
						<input asp-for="@Model.SalesOrderId" type="text" class="form-control" autofocus="autofocus" placeholder="Sales Order Id" />
						<span asp-validation-for="SalesOrderId"></span>
					</div>
					<div class="card-header"><b>Project Notes </b></div>
					<div class="form-group col-md-3">
						<label for="ProjectNotes" class="form-label">Project Notes</label>
						<textarea asp-for="@Model.ProjectNotes" type="text" class="input-with-feedback form-control" data-fieldtype="Small Text" autofocus="autofocus" placeholder="Project Notes" style="height: 150px;"></textarea>
						<span asp-validation-for="ProjectNotes"></span>
					</div>
					<div class="card-header"><b>Costing and Billing </b></div>
					<div class="form-group col-md-3">
						<label for="EstimatedCost" class="form-label">Estimated Cost</label>
						<input asp-for="@Model.EstimatedCost" type="text" class="form-control" autofocus="autofocus" placeholder="Estimated Cost" />
						<span asp-validation-for="EstimatedCost"></span>
					</div>

					<div class="card-header"><b>Assign Employees</b></div>
					<div class="form-group col-md-12">
						<label for="EstimatedCost" class="form-label">Assign Employees</label>
						<input type="hidden" asp-for="@Model.ProjectEmployeeString" id="ProjectEmployeeString" />
						<ejs-grid id="Grid" actionComplete="actionComplete" actionBegin="actionBegin" dataSource="@Model.ProjectEmployees" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
							<e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" newRowPosition="Top"></e-grid-editSettings>

							<e-grid-columns>
								<e-grid-column field="EmployeeId" Visible="false" foreignKeyField="EmployeeId" headerText="Full Name" edit="new {@@params = DropDownList }" editType="dropdownedit" width="140"></e-grid-column>
								<e-grid-column field="FullName" foreignKeyField="EmployeeId" headerText="Employee Name" width="140"></e-grid-column>
							</e-grid-columns>
						</ejs-grid>


					</div>


					<div class="card-header"><b>Assign Project Monitering Users</b></div>
					<div class="form-group col-md-12">
						<label for="EstimatedCost" class="form-label">Assign Project Monitering Users</label>
						<input type="hidden" asp-for="@Model.ProjectUsersString" id="ProjectUsersString" />
						<ejs-grid id="GridUsers" actionComplete="actionCompleteUser" actionBegin="actionBeginUsers" dataSource="@Model.ProjectUsers" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
							<e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" newRowPosition="Top"></e-grid-editSettings>

							<e-grid-columns>
								<e-grid-column field="UserId" Visible="false" foreignKeyField="UserId" headerText="Full Name" edit="new {@@params = DropDownList }" editType="dropdownedit" width="140"></e-grid-column>
								<e-grid-column field="FullName" foreignKeyField="UserId" headerText="User Name" width="140"></e-grid-column>
							</e-grid-columns>
						</ejs-grid>


					</div>
					<div class="card-body">
						<div class="col-lg-2 col-md-2 col-sm-12">
							<button type="submit" class="btn btn-primary">Save</button>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>


<script>
	function onProjectTypefiltering(e) {
		var query = new ej.data.Query();
		query = (e.text !== '') ? query.where('ProjectTypeName', 'startswith', e.text, true) : query;
		e.updateData(@Html.Raw(JsonConvert.SerializeObject(ViewBag.ProjectTypes)), query);
	}

	function onProjectManagerfiltering(e) {
		var query = new ej.data.Query();
		query = (e.text !== '') ? query.where('FullName', 'startswith', e.text, true) : query;
		e.updateData(@Html.Raw(JsonConvert.SerializeObject(ViewBag.ProjectManager)), query);
	}


</script>
<script>
	var employeeName = '';
	function onChange(args) {
		var grid = document.getElementById('Grid').ej2_instances[0];
		//grid id + field name
		var customerIDele = document.querySelector('#' + grid.element.id + 'FullName');
		// here we have retrieved the value of the shipcountry dropdown and applied the value on customerID field

		employeeName = args.itemData.FullName;
	}

	var userName = ''

	function onChangeUser(args){
		var grid = document.getElementById('GridUsers').ej2_instances[0];
		//grid id + field name
		var customerIDele = document.querySelector('#' + grid.element.id + 'FullName');
		// here we have retrieved the value of the shipcountry dropdown and applied the value on customerID field

		userName = args.itemData.FullName;
	}


	function actionBegin(args) {
		var grid = document.getElementById("Grid").ej2_instances[0];


		if (args.requestType === 'save') {
			args.data.FullName = employeeName
			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "EmployeeId") {
					grid.columns[i].visible = false
					console.log(grid.columns[i]);
				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = true
				}

			}
			if (grid.pageSettings.currentPage !== 1 && grid.editSettings.newRowPosition === 'Top') {
				args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - grid.pageSettings.pageSize;
			} else if (grid.editSettings.newRowPosition === 'Bottom') {
				args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - 1;
			}
		}
		else if (args.requestType === 'add' || args.requestType === 'beginEdit') {

			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "EmployeeId") {
					grid.columns[i].visible = true;
				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = false
				}

			}

		}
	}

	function actionComplete(args) {
		if (args.requestType === 'save' || args.requestType === 'delete') {
			var grid = document.getElementById("Grid").ej2_instances[0];

			$('#ProjectEmployeeString').val(JSON.stringify(grid.currentViewData));
		}

	}




	function actionCompleteUser(args) {
		var grid = document.getElementById("GridUsers").ej2_instances[0];


		if (args.requestType === 'save') {
			args.data.FullName = userName
			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "UserId") {
					grid.columns[i].visible = false
					
				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = true
				}

			}
			if (grid.pageSettings.currentPage !== 1 && grid.editSettings.newRowPosition === 'Top') {
				args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - grid.pageSettings.pageSize;
			} else if (grid.editSettings.newRowPosition === 'Bottom') {
				args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - 1;
			}
		}
		else if (args.requestType === 'add' || args.requestType === 'beginEdit') {

			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "UserId") {
					grid.columns[i].visible = true;
				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = false
				}

			}

		}
	}

	function actionBeginUsers(args) {
		if (args.requestType === 'save' || args.requestType === 'delete') {
			var grid = document.getElementById("GridUsers").ej2_instances[0];

			$('#ProjectUsersString').val(JSON.stringify(grid.currentViewData));
		}

	}




</script>

<style>
	#typeddl {
		min-width: 100px;
	}
</style>

<style>
	.e-dropdownbase .e-list-item {
		overflow: visible !important;
	}
</style>