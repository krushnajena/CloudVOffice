@using System.Collections;
@{
	Layout = "_MainAppLayout";
	ViewData["Title"] = "Schedule Interview";
}
@addTagHelper *, Syncfusion.EJ2
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<header class="main-heading">
	<div class="container-fluid">
		<div class="row">
			<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
				<div class="page-icon">
					<i class="icon-laptop_windows"></i>
				</div>
				<div class="page-title">
					<h5>Schedule Interview</h5>

				</div>
			</div>
			<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
				<div class="right-actions">
					<span class="last-login">Last Login: 2 hours ago</span>
				</div>
			</div>
		</div>
	</div>
</header>



<div class="main-content">
	<div class="row gutters">
		<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
			<div class="card">
				<form asp-route="Recruitment/ScheduleInterview/ScheduleInterview.cshtml" method="post" autocomplete="off">
					<div asp-validation-summary="ModelOnly" class="message-error"></div>
					<div class="card-header"><b>Timesheet</b></div>
					<div class="card-body">
						<div class="form-row">
							<div class="form-group col-md-3">
							</div>
						</div>


						<div class="form-row" id="ProjectWork">
							<div class="form-group col-md-3">
								<label for="JobId" class="form-label">Job&nbsp;<span style="color:red;"><b>*</b></span></label>
								<ejs-dropdownlist id="JobId" allowFiltering="true" placeholder="Select Job" dataSource="@(new SelectList((IEnumerable)ViewBag.JobOpenings, "JobOpeningId", "JobTitle").Items)" popupHeight="220px" change="onJobChange">
									<e-dropdownlist-fields text="JobTitle" value="JobOpeningId"></e-dropdownlist-fields>
								</ejs-dropdownlist>

							</div>
							<div class="form-group col-md-3">
								<label for="JobApplicationId" class="form-label">Project Task&nbsp;<span style="color:red;"><b>*</b></span></label>
								<ejs-dropdownlist id="JobApplicationId" allowFiltering="true" placeholder="Select a Job Application" popupHeight="220px" change="onApplicantOnChangeJob">
									<e-dropdownlist-fields text="applicantName" value="jobApplicationId"></e-dropdownlist-fields>
								</ejs-dropdownlist>

							</div>



						</div>


						<ejs-grid id="GridOverview" allowFiltering="true" allowResizing="true" autoFit="true" dataBound="dataBound" allowSorting="true" allowExcelExport="true" allowGrouping="true" allowMultiSorting="true" allowPdfExport="true" height="600" rowHeight="38" enableHover="false" enableHeaderFocus="true" enableVirtualization="true" allowSelection="true">
							<e-grid-filtersettings type="Menu"></e-grid-filtersettings>

							<e-grid-selectionsettings persistSelection="true" type="Multiple" checkboxOnly="true"></e-grid-selectionsettings>
							<e-grid-columns>

								<e-grid-column field="interviewRoundName" headerText="Interview Round Name" textAlign="Left" width="120"></e-grid-column>
								<e-grid-column field="scheduledOn" headerText="Log Date & Time" textAlign="Left" width="120"></e-grid-column>
								<e-grid-column headerText="Snap" template="#Actions" width="120"></e-grid-column>
							</e-grid-columns>
						</ejs-grid>



					</div>


					<div class="card-body">
						<div class="col-lg-2 col-md-2 col-sm-12">
							<button type="submit" class="btn btn-primary">Save</button>
						</div>
					</div>

				</form>
			</div>
		</div>
	</div>
</div>

<script id="Actions" type="text/x-template">
	${interviewAction(data)}

</script>

<script>
	function dataBound(args) {
		this.autoFitColumns();
	}

	function interviewAction(e) {
		if (e.buttonFlag == 0) {
			return ' ';
		} else if (e.buttonFlag == 1) {
			return '<span class="badge badge-pill badge-success" > ReSchedule </span>';
		}
		else if (e.buttonFlag == 2) {
			return '<span class="badge badge-pill badge-success" > Schedule </span>';
		}
		else if (e.buttonFlag == 3) {
			return '<span class="badge badge-pill badge-success" > Noshow </span>';
		}
		else if (e.buttonFlag == 4) {
			return '<span class="badge badge-pill badge-success" > Release </span>';
		}
		else {
			return '';
		}





	}
	var jobId = 0;
	function onJobChange(args) {

		$.ajax({
			type: "GET",
			url: '/Recruitment/JobApplication/GetJobApplicationsByJobId',
			data: { JobId: args.value },
			contentType: "application/json;",
			dataType: "json",
			success: function (result) {
				jobId = args.value;
				var projectActivityDropDown = document.getElementById("JobApplicationId").ej2_instances[0];
				projectActivityDropDown.dataSource = result;
				//cityDropDown.refresh();
				projectActivityDropDown.dataBind();

			},
			error: function () {

			}
		});


	}


	function onApplicantOnChangeJob(args) {

		$.ajax({
			type: "GET",
			url: '/Recruitment/ScheduleInterview/GetInterViewRoundsForSchedule',
			data: { JobId: jobId, ApplicationId: args.value },
			contentType: "application/json;",
			dataType: "json",
			success: function (result) {

				var grid = document.getElementById('GridOverview').ej2_instances[0]; // Grid instance
				grid.dataSource = ej.data.DataUtil.parse.parseJson(result);

			},
			error: function () {

			}
		});


	}



</script>