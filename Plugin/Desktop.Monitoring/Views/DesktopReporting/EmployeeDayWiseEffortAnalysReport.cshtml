@{
    Layout = "_MainAppLayout"; 
    ViewData["Title"] = "Employee Day Wise Effort Analys Report";

    int days = (int)DateTime.Now.DayOfWeek;
    DateTime lastMonth = DateTime.Now.AddMonths(-1);
    var weekStart = DateTime.Now.AddDays(-days);
    var weekEnd = weekStart.AddDays(6);
    var monthStart = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    var monthEnd = monthStart.AddMonths(1).AddDays(-1);
    var lastMonthStart = new DateTime(lastMonth.Year, lastMonth.Month, 1);
    var lastMonthEnd = lastMonthStart.AddMonths(1).AddDays(-1);
    var lastYearStart = new DateTime(DateTime.Now.Year - 1, 1, 1);
    var lastYearEnd = new DateTime(DateTime.Now.Year - 1, 12, 31);
}
@using System.Collections;
@using Newtonsoft.Json;
@addTagHelper *, Syncfusion.EJ2
<header class="main-heading">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                <div class="page-icon">
                    <i class="icon-laptop_windows"></i>
                </div>
                <div class="page-title">
                    <h5>EMPLOYEE</h5>
                    <h6 class="sub-heading">  </h6>
                </div>
            </div>
            <div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
                <div class="right-actions">
                    <span class="last-login">  </span>
                </div>
            </div>
        </div>
    </div>
</header>


<div class="main-content">
    <div class="row gutters">


        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
            <div class="card">

                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label for="DepartmentName" class="form-label">Date Range</label>
                            <ejs-daterangepicker id="dp_session" placeholder="Choose a Range" startDate="monthStart" endDate="monthEnd">
                                <e-daterangepicker-presets>
                                    <e-daterangepicker-preset id="week" label="This Week" start="weekStart" end="weekEnd"></e-daterangepicker-preset>
                                    <e-daterangepicker-preset id="month" label="This Month" start="monthStart" end="monthEnd"></e-daterangepicker-preset>
                                    <e-daterangepicker-preset id="lastmonth" label="Last Month" start="lastMonthStart" end="lastMonthEnd"></e-daterangepicker-preset>
                                    <e-daterangepicker-preset id="year" label="Last Year" start="lastYearStart" end="lastYearEnd"></e-daterangepicker-preset>
                                </e-daterangepicker-presets>
                            </ejs-daterangepicker>
                        </div>
                         <div class="form-group col-md-4">
                            <label for="DepartmentName" class="form-label">Employee</label>
                            <ejs-dropdownlist id="EmployeeId" allowFiltering="true" filtering="onEmployeefiltering" dataSource="@(new SelectList((IEnumerable)ViewBag.Employees, "EmployeeId", "FullName").Items)" placeholder="Select a Employee" popupHeight="220px">
                                <e-dropdownlist-fields text="FullName" value="EmployeeId"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>

                        <div class="col-lg-2 col-md-2 col-sm-12">
                            <button type="button" class="btn btn-primary" id="btn_search">Search</button>
                        </div>
                    </div>

                </div>

            </div>

            <div class="card">
              

                <div class="card-body">

                    <ejs-grid id="GridOverview" allowFiltering="true" allowSorting="true" allowExcelExport="true" allowGrouping="true" allowMultiSorting="true" allowPdfExport="true" height="600" rowHeight="38" enableHover="false" enableHeaderFocus="true" enableVirtualization="true" allowSelection="true"
                              pdfQueryCellInfo="exportQueryCellInfo" toolbarClick="toolbarClick" toolbar="@(new List<string>() {"ExcelExport", "PdfExport" , "CsvExport" ,"Search"})">
                        <e-grid-filtersettings type="Menu"></e-grid-filtersettings>

                        <e-grid-selectionsettings persistSelection="true" type="Multiple" checkboxOnly="true"></e-grid-selectionsettings>
                        <e-grid-columns>
                            <e-grid-column field="employeeName" headerText="Employee Name" textAlign="Left" width="120"></e-grid-column>
                            <e-grid-column field="date" headerText="Date" textAlign="Left" width="120"></e-grid-column>
                          
                            <e-grid-column field="effortHourRequired" headerText="Required Effort Hours" textAlign="Left" width="120"></e-grid-column>
                            <e-grid-column field="effortHours" headerText="Effort Hours" textAlign="Left" width="120"></e-grid-column>
                            <e-grid-column field="idelHours" headerText="Idel Hours" textAlign="Left" width="120"></e-grid-column>

                            <e-grid-column field="actualEffortHours" headerText="Actual Effort Hours" textAlign="Left" width="120"></e-grid-column>
                            <e-grid-column field="effortPercentage" headerText="Effort Percentage" textAlign="Left" width="120"></e-grid-column>

                        </e-grid-columns>
                    </ejs-grid>

                </div>

            </div>


        </div>
    </div>

</div>



<script>
    function onEmployeefiltering(e) {
        var query = new ej.data.Query();
        query = (e.text !== '') ? query.where('FullName', 'startswith', e.text, true) : query;
        e.updateData(@Html.Raw(JsonConvert.SerializeObject(ViewBag.Employees)), query);
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("GridOverview").ej2_instances[0];
        if (args.item.id === 'GridOverview_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'GridOverview_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'GridOverview_csvexport') {
            gridObj.csvExport();
        }
    }
    function exportQueryCellInfo(args) {
        if (args.column.headerText === 'Employee Image') {
            if (args.name === "excelQueryCellInfo") {
                args.image = { height: 75, base64: args.data["EmployeeImage"], width: 75 };
            } else {
                args.image = { base64: args.data["EmployeeImage"] };
            }
        }
        if (args.column.headerText === 'Track') {
            args.hyperLink = {
                target: "../../DMS/DesktopLogin/Track?id=" + args.data["erpUser"],
                displayText: "Track"
            };
        }
    };
    function gridDataBound(args) {
        if (isInitial) {
            var grid = document.getElementById("GridOverview").ej2_instances[0];
            grid.toolbarModule.toolbar.hideItem(2, true);
            isInitial = false;
        }
    }

    $('#btn_search').click(function () {
        search();
    });
    async function search() {

        var a = document.getElementById('dp_session').ej2_instances[0];
        const d = new Date(a.startValue);
        const td = new Date(a.endValue);
        var fromdate = d.getDate()
        var frommonth = d.getMonth() + 1;
        if (fromdate < 10) {
            fromdate = '0' + fromdate;
        }
        if (frommonth < 10) {
            frommonth = '0' + frommonth;
        }
        var todate = td.getDate()
        var tomonth = td.getMonth() + 1;
        if (todate < 10) {
            todate = '0' + todate;
        }
        if (tomonth < 10) {
            tomonth = '0' + tomonth;
        }
        var EmployeeId=   document.getElementById("EmployeeId").ej2_instances[0];
        var model = {

            fromDate: d.getFullYear() + '-' + frommonth + '-' + fromdate,
            toDate: td.getFullYear() + '-' + tomonth + '-' + todate,
            employeeId: EmployeeId.value

        }
        console.log(JSON.stringify(model));
        $.ajax({
            type: "POST",
            url: "/DesktopMonitoring/DesktopReporting/GetEmployeeDayWiseEffortAnalysReport",
            data: model,

            success: function (data, statusText, xhr) {
                console.log(data);
                if (xhr.status === 200) {
                    var grid = document.getElementById('GridOverview').ej2_instances[0]; // Grid instance
                    grid.dataSource = ej.data.DataUtil.parse.parseJson(data);
                    //var chartDatas = [];
                    //for (var i = 0; i < data.length;i++){

                    //    const cd = new Date(data[i]['date']);
                       
                    //    var cfromdate = cd.getDate()
                    //    var cfrommonth = cd.getMonth() + 1;
                    //    if (cfromdate < 10) {
                    //        cfromdate = '0' + cfromdate;
                    //    }
                    //    if (cfrommonth < 10) {
                    //        cfrommonth = '0' + cfrommonth;
                    //    }
                    //    chartDatas.push({
                    //        x: new Date( cfromdate+'-'+ cfrommonth + '-' + cd.getFullYear() ),
                    //        y: data[i]['effortPercentage']
                    //    })
                    //}

                    //var chartEle = document.createElement('div');
                    //chartEle.id = 'chartContainer' + window.count;
                    //document.getElementsByTagName('body')[0].appendChild(chartEle);

                    ////Created chart here
                    //var chart = new ej.charts.Chart({
                    //    series: [{
                    //        type: 'Line', xName: 'x', width: 2, marker: { visible: true },
                    //        yName: 'y', name: 'Germany',
                    //        dataSource: chartDatas,
                    //    }],
                    //    title: 'Inflation - Consumer Price', tooltip: { enable: true }, height: '400', width: '100%'
                    //});
                    //chart.appendTo('#newChart');
                    //window.count++;

                } else if (data.status === "duplicate") {
                    sweetAlert("Validation Alert!", data.responseMsg, "warning");
                } else if (data.status === "error") {
                    sweetAlert("Validation Alert!", data.responseMsg, "warning");
                } else {
                    sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                }
            },
            error: function (data) {
                if (data.status == 401) {
                    window.location.replace('/Message/TokenExpire');
                } else if (data.status == 403) {
                    window.location.replace('/Message/Unauthorize');
                } else if (data.status == 400) {
                    sweetAlert("Validation Alert!", "Please check input data!", "warning");
                }
            }
        });
    }
</script>