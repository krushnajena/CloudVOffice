// <auto-generated />
using System;
using CloudVOffice.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudVOffice.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231009050345_SuplierMig")]
    partial class SuplierMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            AccountTypeName = "Accumulated Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7002),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 2,
                            AccountTypeName = "Asset Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7017),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 3,
                            AccountTypeName = "Bank",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7019),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 4,
                            AccountTypeName = "Cash",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7020),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 5,
                            AccountTypeName = "Chargeable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7021),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 6,
                            AccountTypeName = "Capital Work in Progress",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7023),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 7,
                            AccountTypeName = "Cost of Goods Sold",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7024),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 8,
                            AccountTypeName = "Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7025),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 9,
                            AccountTypeName = "Equity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7026),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 10,
                            AccountTypeName = "Expense Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7027),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 11,
                            AccountTypeName = "Expenses Included In Asset Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7028),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 12,
                            AccountTypeName = "Expenses Included In Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7029),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 13,
                            AccountTypeName = "Fixed Asset",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7030),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 14,
                            AccountTypeName = "Income Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7031),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 15,
                            AccountTypeName = "Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7032),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 16,
                            AccountTypeName = "Receivable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7033),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 17,
                            AccountTypeName = "Round Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7034),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 18,
                            AccountTypeName = "Stock",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7035),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 19,
                            AccountTypeName = "Stock Adjustment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7036),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 20,
                            AccountTypeName = "Stock Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7037),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 21,
                            AccountTypeName = "Service Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7039),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 22,
                            AccountTypeName = "Tax",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7040),
                            Deleted = false
                        },
                        new
                        {
                            AccountTypeId = 23,
                            AccountTypeName = "Temporary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7041),
                            Deleted = false
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.Property<int>("ChartOfAccountsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChartOfAccountsId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BalanceMustBe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentAccountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TaxRate")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChartOfAccountsId");

                    b.HasIndex("ParentAccountGroupId");

                    b.ToTable("ChartOfAccounts");

                    b.HasData(
                        new
                        {
                            ChartOfAccountsId = 1,
                            AccountName = "Application of Funds (Assets)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7168),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 2,
                            AccountName = "Current Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7171),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 3,
                            AccountName = "Accounts Receivable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7174),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 4,
                            AccountName = "Debtors",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7215),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 3,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 5,
                            AccountName = "Bank Accounts",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7218),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 6,
                            AccountName = "Cash In Hand",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7220),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 7,
                            AccountName = "Cash",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7223),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 6,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 8,
                            AccountName = "Loans and Advances (Assets)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7225),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 9,
                            AccountName = "Securities and Deposits",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7227),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 10,
                            AccountName = "Earnest Money",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7229),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 9,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 11,
                            AccountName = "Stock Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7231),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 12,
                            AccountName = "Stock In Hand",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7233),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 11,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 13,
                            AccountName = "Tax Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7235),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 2,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 14,
                            AccountName = "Fixed Assets",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7237),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 15,
                            AccountName = "Accumulated Depreciations",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7239),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 16,
                            AccountName = "Accumulated Depreciations",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7242),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 17,
                            AccountName = "Buildings",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7244),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 18,
                            AccountName = "Capital Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7246),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 19,
                            AccountName = "Electronic Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7248),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 20,
                            AccountName = "Furnitures and Fixtures",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7250),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 21,
                            AccountName = "Office Equipments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7252),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 22,
                            AccountName = "Plants and Machineries",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7255),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 14,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 23,
                            AccountName = "Investments",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7257),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 24,
                            AccountName = "Temporary Accounts",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7259),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 1,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 25,
                            AccountName = "Temporary Opening",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7261),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 24,
                            ReportType = "Balance Sheet",
                            RootType = "Assets"
                        },
                        new
                        {
                            ChartOfAccountsId = 26,
                            AccountName = "Source of Funds (Liabilities)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7263),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 27,
                            AccountName = "Capital Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7265),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 26,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 28,
                            AccountName = "Reserves and Surplus",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7267),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 27,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 29,
                            AccountName = "Shareholders Funds",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7270),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 27,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 30,
                            AccountName = "Current Liabilities",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7271),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 26,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 31,
                            AccountName = "Accounts Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7273),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 32,
                            AccountName = "Creditors",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7275),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 31,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 33,
                            AccountName = "Payroll Payable",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7277),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 31,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 34,
                            AccountName = "Duties and Taxes",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7279),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 35,
                            AccountName = "TDS",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7282),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 34,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 36,
                            AccountName = "Loans (Liabilities)",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7284),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 37,
                            AccountName = "Bank Overdraft Account",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7288),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 38,
                            AccountName = "Secured Loans",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7290),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 39,
                            AccountName = "Unsecured Loans",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7292),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 36,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 40,
                            AccountName = "Stock Liabilities",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7294),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 30,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 41,
                            AccountName = "Stock Received But Not Billed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7296),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 40,
                            ReportType = "Balance Sheet",
                            RootType = "Liability"
                        },
                        new
                        {
                            ChartOfAccountsId = 42,
                            AccountName = "Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7298),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 43,
                            AccountName = "Direct Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7300),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 42,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 44,
                            AccountName = "Sales",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7302),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 43,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 45,
                            AccountName = "Service",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7304),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 43,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 46,
                            AccountName = "Indirect Income",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7306),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 42,
                            ReportType = "Profit and Loss",
                            RootType = "Income"
                        },
                        new
                        {
                            ChartOfAccountsId = 47,
                            AccountName = "Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7338),
                            Deleted = false,
                            IsGroup = true,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 48,
                            AccountName = "Direct Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7340),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 47,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 49,
                            AccountName = "Stock Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7342),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 48,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 50,
                            AccountName = "Cost of Goods Sold",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7344),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 51,
                            AccountName = "Expenses Included In Valuation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7346),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 52,
                            AccountName = "Stock Adjustment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7348),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 49,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 53,
                            AccountName = "Indirect Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7351),
                            Deleted = false,
                            IsGroup = true,
                            ParentAccountGroupId = 47,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 54,
                            AccountName = "Administrative Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7353),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 55,
                            AccountName = "Commission on Sales",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7355),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 56,
                            AccountName = "Depreciation",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7357),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 57,
                            AccountName = "Entertainment Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7360),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 58,
                            AccountName = "Exchange Gain/Loss",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7361),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 59,
                            AccountName = "Freight and Forwarding Charges",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7363),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 60,
                            AccountName = "Gain/Loss on Asset Disposal",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7366),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 61,
                            AccountName = "Legal Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7370),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 62,
                            AccountName = "Marketing Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7372),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 63,
                            AccountName = "Miscellaneous Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7374),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 64,
                            AccountName = "Office Maintenance Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7376),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 65,
                            AccountName = "Office Rent",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7378),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 66,
                            AccountName = "Postal Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7380),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 67,
                            AccountName = "Print and Stationary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7382),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 68,
                            AccountName = "Rounded Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7384),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 69,
                            AccountName = "Salary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7386),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 70,
                            AccountName = "Sales Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7388),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 71,
                            AccountName = "Telephone Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7390),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 72,
                            AccountName = "Travel Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7392),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 73,
                            AccountName = "Utility Expenses",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7394),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        },
                        new
                        {
                            ChartOfAccountsId = 74,
                            AccountName = "Write Off",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7396),
                            Deleted = false,
                            IsGroup = false,
                            ParentAccountGroupId = 53,
                            ReportType = "Profit and Loss",
                            RootType = "Expense"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.FinancialYear", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialYearId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinancialYearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.SupplierGroup", b =>
                {
                    b.Property<int>("SupplierGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierGroupId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SupplierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplierGroupId");

                    b.ToTable("SupplierGroups");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.AttendanceDevice", b =>
                {
                    b.Property<int?>("AttendanceDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AttendanceDeviceId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceSlNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceDeviceId");

                    b.ToTable("AttendanceDevices");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.AttendanceRequest", b =>
                {
                    b.Property<long>("AttendanceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttendanceRequestId"));

                    b.Property<string>("ApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ForDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceRequestId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AttendanceRequests");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.EmployeeAttendance", b =>
                {
                    b.Property<long>("EmployeeAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeAttendanceId"));

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEarlyExit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLateEntry")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeAttendanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAttendances");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.EmployeeBiometricData", b =>
                {
                    b.Property<long>("EmployeeBiometricDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeBiometricDataId"));

                    b.Property<string>("AnsiTemplate1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnsiTemplate2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnsiTemplate3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ISOImage1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOImage2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOImage3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOTemplate1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOTemplate2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOTemplate3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WSQImage1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WSQImage2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WSQImage3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeBiometricDataId");

                    b.ToTable("EmployeeBiometricDatas");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.EmployeeCheckIn", b =>
                {
                    b.Property<long>("EmployeeCheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeCheckInId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ForDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeCheckInId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCheckIns");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.WorkFromHomeRequest", b =>
                {
                    b.Property<long>("WorkFromHomeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WorkFromHomeRequestId"));

                    b.Property<string>("ApprovalRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkFromHomeRequestId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkFromHomeRequests");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyDetailsId"));

                    b.Property<string>("ABBR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDetailsId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.LetterHead", b =>
                {
                    b.Property<int>("LetterHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterHeadId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LetterHeadAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LetterHeadId");

                    b.ToTable("LetterHeads");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.Property<int>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAccountId"));

                    b.Property<string>("AlternativeEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("EmailAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultSending")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAccountId");

                    b.HasIndex("Domain");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailDomain", b =>
                {
                    b.Property<int>("EmailDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailDomainId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncomingIsIMAP")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsStartTLs")
                        .HasColumnType("bit");

                    b.Property<int>("IncomingPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutgoingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("OutgoingIsTLs")
                        .HasColumnType("bit");

                    b.Property<int>("OutgoingPort")
                        .HasColumnType("int");

                    b.Property<string>("OutingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailDomainId");

                    b.ToTable("EmailDomains");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Custom.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<long?>("AccountManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("CustomerGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Custom.CustomerGroup", b =>
                {
                    b.Property<int>("CustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerGroupId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CustomerGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerGroupId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.Property<long>("DesktopActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopActivityLogId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppOrWebPageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("DesktopLoginId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessOrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Todatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopActivityLogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DesktopActivityLogs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopKeyStroke", b =>
                {
                    b.Property<long>("DesktopKeyStrokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopKeyStrokeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("DesktopActivityLogId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("KeyStrokeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keystrokes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopKeyStrokeId");

                    b.HasIndex("DesktopActivityLogId");

                    b.ToTable("DesktopKeyStrokes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopLogin", b =>
                {
                    b.Property<long>("DesktopLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopLoginId"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("IdelTime")
                        .HasColumnType("time");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActiveSession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoLogedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LogOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SyncedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopLoginId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DesktopLogins");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopSnapshot", b =>
                {
                    b.Property<long>("DesktopSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DesktopSnapshotId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("DesktopActivityLogId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesktopLoginId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("FileSize")
                        .HasColumnType("float");

                    b.Property<string>("LogType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapShot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SnapshotDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesktopSnapshotId");

                    b.HasIndex("DesktopActivityLogId");

                    b.ToTable("DesktopSnapshots");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.RestrictedApplication", b =>
                {
                    b.Property<long>("RestrictedApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RestrictedApplicationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("RestrictedApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RestrictedApplicationId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("RestrictedApplications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.RestrictedWebsite", b =>
                {
                    b.Property<long>("RestrictedWebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RestrictedWebsiteId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("RestrictedWebsiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RestrictedWebsiteId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("RestrictedWebsites");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("DefaultSendingAccount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailTemplateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6857),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\">\r\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">{%welcometitle%} </h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table border=\"0\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\"><span style=\"color:rgb(22,123,158); font-size:16px; margin-right:2px; font-weight:600\"></span>{%helloname%}</h5>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%accountcreatetionmessage%}</p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%loginidmessage%}</p>\r\n\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%aditionalmessage%}</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br />\r\n                                                                                {%copylinkfrommessage%}\r\n                                                                            </div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"></div> </div></span>\r\n</div>",
                            EmailTemplateName = "WelcomeEmail",
                            Subject = ""
                        },
                        new
                        {
                            EmailTemplateId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6861),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Project Assignment Notification</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td class=\"\" style=\"vertical-align: top;\">\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\">Hello {%helloname%},</h5>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">we hope this message finds you well.we are delighted to inform you</p><p><span style=\"background-color: transparent; text-align: inherit;\">that you have been assigned to a new project in our organization. This project is an essential inititative for our company's growth, and we are confident that your skills and expertise will play crucial role in its success.</span><br></p><p><span style=\"background-color: transparent; text-align: inherit;\"><br></span></p><p><span style=\"background-color: transparent; text-align: inherit;\">Project Details:</span></p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">Project Name: {%ProjectName%}</p><p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">Project Id:&nbsp;<span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">{%projectid%}</span></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Project Duration:<span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">{%startdate%} to&nbsp;<span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">{%enddate%}</span></span></span></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Project Manager:<span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">{%projectmanagername%}</span></span></span></span></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Project Description:<span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">{%projectdescription%}</span></span></span></span></span></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 16px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\"><br></span></span></span></span></span></p></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "ProjectAssignment",
                            Subject = "Project Assignment - {%ProjectName%}"
                        },
                        new
                        {
                            EmailTemplateId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6862),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Project Un-Assignment</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\" class=\"\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\" class=\"\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\" class=\"\"><br><table class=\"e-rte-table\" style=\"max-width: 1356.5px;\"><tbody><tr><td class=\"\"><div style=\"margin-left:1.2rem; margin-bottom:1em\"><p>Hello {%Name%}</p><p>I hope this email finds you well. We are writing to inform you about a recent change in project assignments within our organization. Regrettably, you have been un-assigned from the following project:</p>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">Project Name: {%ProjectName%}</p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">Project Id: {%ProjectId%}</p><p><br></p>\r\n\r\n\r\n                                                                                <p>The decision to un-assign you from this project was made based on [reason for un-assignment, e.g., changes in project requirements, resource reallocation, etc.]. We understand that you may have invested time and effort into this project, and we appreciate your dedication.</p><p>Your un-assignment from this project does not reflect on your capabilities or commitment to our organization. We value your skills and contributions and look forward to involving you in future projects that align with your expertise.</p></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "ProjectUn-Assignment",
                            Subject = "Project Un-Assignment - {%ProjectName%}"
                        },
                        new
                        {
                            EmailTemplateId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6864),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Timesheet Updation | Reminder!</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\" class=\"\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\" class=\"\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\" class=\"\"><br><table class=\"e-rte-table\" style=\"max-width: 1356.5px;\"><tbody><tr><td class=\"\"><div style=\"margin-left:1.2rem; margin-bottom:1em\"><p>Hello {%Name%}</p><p style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(103, 103, 103); line-height: 23.2px; font-size: 16px; margin: 5px 0px !important;\">This is a reminder that your timesheet updation is pending for:<span style=\"background-color: transparent; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 14px; text-align: inherit;\">&nbsp;<strong>{%Date%}</strong></span></p><p style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(103, 103, 103); line-height: 23.2px; font-size: 16px; margin: 5px 0px !important;\">Please log into {%appname%} to update your timesheet.</p><p style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(103, 103, 103); line-height: 23.2px; font-size: 16px; margin: 5px 0px !important;\"><br></p><p style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(103, 103, 103); line-height: 23.2px; font-size: 16px; margin: 5px 0px !important;\">Failure to submit your timesheets may result in loss of Earned Leave (EL) or loss of pay.</p><p style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(103, 103, 103); line-height: 23.2px; font-size: 16px; margin: 5px 0px !important;\">If you have any questions regarding your Timesheet then please contact your Reporting Authority/Project Manager.</p></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "TimesheetReminder",
                            Subject = "Timesheet Updation | Reminder!"
                        },
                        new
                        {
                            EmailTemplateId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6865),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Task Overdue</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\" class=\"\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\" class=\"\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\" class=\"\"><br><table class=\"e-rte-table\" style=\"max-width: 1356.5px;\"><tbody><tr><td class=\"\"><div style=\"margin-left:1.2rem; margin-bottom:1em\"><p>Hello {%Name%}</p><p>I hope this email finds you well. We would like to bring to your attention that there is an overdue task assigned to you with the following details:</p><p>Task Name : {%TaskName%}</p><p>Task Id : {%TaskId%}</p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 14px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Due Date : {%DueDate%}</span><br></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 14px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Project Name : {%ProjectName%}</span><br></p><p>Project Id : {%ProjectId%}</p><p>As of today, {%CurrentDate%}, the task remains incomplete and is past its due date. We understand that unforeseen circumstances may arise, leading to delays. However, it is crucial to address overdue tasks promptly to maintain project timelines and overall efficiency.</p><p><span style=\"background-color: transparent; text-align: inherit;\">We kindly request you to prioritize this task and take immediate action to complete it as soon as possible. If you have encountered any obstacles or require additional resources to complete the task, please discuss with your Project Manager.</span><br></p></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "TaskOverdue",
                            Subject = "Task Overdue"
                        },
                        new
                        {
                            EmailTemplateId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6866),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Today Task Due {%TaskName%}</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\" class=\"\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\" class=\"\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\" class=\"\"><br><table class=\"e-rte-table\" style=\"max-width: 1356.5px;\"><tbody><tr><td class=\"\"><div style=\"margin-left:1.2rem; margin-bottom:1em\"><p>Hello {%Name%}</p><p>This is a friendly reminder that the following task is due for completion today:</p><p>Task Name : {%TaskName%}</p><p>Task Id : {%TaskId%}</p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 14px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Due Date : {%DueDate%}</span><br></p><p><span style=\"color: rgb(103, 103, 103); font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; font-size: 14px; font-style: normal; font-weight: 400; text-align: start; text-indent: 0px; white-space: normal; background-color: rgb(255, 255, 255); display: inline !important; float: none;\">Project Name : {%ProjectName%}</span><br></p><p>Project Id : {%ProjectId%}</p><p>Please ensure that you allocate sufficient time and effort to complete the task within the given deadline. Your prompt attention to this matter will help us maintain project timelines and achieve our goals efficiently.</p></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "TaskDueTodayReminder",
                            Subject = "Reminder: Today's Task Due - {%Taskname%}"
                        },
                        new
                        {
                            EmailTemplateId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6868),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Password Reset Request</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td class=\"\">\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\">Hello {%helloname%}</h5><div><br></div>\r\n                                                                                <p>We have received a request to reset your account password. To proceed with the password reset, please click on the link below:</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br>If you did not request a password reset, Please ignore this email. Your account will&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">remain secure, and no action is required.</span></div><div style=\"margin-left:1.2rem; margin-bottom:1em\"><span style=\"background-color: transparent; text-align: inherit;\"><p>For security reasons, this link will expire in 2 hours. If you&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">are unable to reset your password within this time frame,&nbsp;</span><span style=\"background-color: transparent; text-align: inherit;\">please request another password reset.</span></p></span></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "PasswordReset",
                            Subject = "Password Reset Request"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HolidayId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.HolidayDays", b =>
                {
                    b.Property<long>("HolidayDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HolidayDaysId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ForDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HolidayId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HolidayDaysId");

                    b.HasIndex("HolidayId");

                    b.ToTable("HolidayDays");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePeriod", b =>
                {
                    b.Property<int>("LeavePeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeavePeriodId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeavePeriodId");

                    b.ToTable("LeavePeriods");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicy", b =>
                {
                    b.Property<int>("LeavePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeavePolicyId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeGradeId")
                        .HasColumnType("int");

                    b.Property<int>("LeavePeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeavePolicyId");

                    b.HasIndex("EmployeeGradeId");

                    b.HasIndex("LeavePeriodId");

                    b.ToTable("LeavePolicies");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicyDetails", b =>
                {
                    b.Property<int?>("LeavePolicyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LeavePolicyDetailsId"));

                    b.Property<int>("AllocationMode")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeavePolicyId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfLeaves")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeavePolicyDetailsId");

                    b.HasIndex("LeavePolicyId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeavePolicyDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveTypeId"));

                    b.Property<bool>("AllowEncashment")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowNegativeBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOverAllocation")
                        .HasColumnType("bit");

                    b.Property<int?>("ApplicableAfterWorkingDays")
                        .HasColumnType("int");

                    b.Property<bool>("BasedOnDateOfJoining")
                        .HasColumnType("bit");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EarnedLeaveFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EarningSalaryComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("EncashmentThresholdDays")
                        .HasColumnType("int");

                    b.Property<int?>("ExpireCarryForwardedLeaves")
                        .HasColumnType("int");

                    b.Property<bool>("IsCarryForward")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompensatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEarnedLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeaveWithoutPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptionalLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyPaidLeave")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaximumCarryForwardedLeaves")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumConsecutiveLeavesAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumLeaveAllocationAllowed")
                        .HasColumnType("int");

                    b.Property<double?>("Rounding")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeaveTypeId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.ShiftEmployee", b =>
                {
                    b.Property<long>("ShiftEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShiftEmployeeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftEmployees");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.ShiftType", b =>
                {
                    b.Property<int>("ShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("EarlyExitGracePeriodInMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDefaultShift")
                        .HasColumnType("bit");

                    b.Property<int?>("LateEntryGracePeriodInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ShiftTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<double?>("ThresholdforAbsentInHours")
                        .HasColumnType("float");

                    b.Property<double?>("ThresholdforHalfDayInHours")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftTypeId");

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<string>("BiometricOrRfIdDeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CTC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<long>("ErpUser")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("JobApplicantId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MarraigeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoticePeriodDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PanNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportPlaceOfIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportValidUpto")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvidentFundAccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationWithEmergencyContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportingAuthority")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RetirementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.EmployeeEducationalQualification", b =>
                {
                    b.Property<long>("EmployeeEducationalQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeEducationalQualificationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolOrUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearOfPassing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeEducationalQualificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducationalQualifications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.HRSettings", b =>
                {
                    b.Property<int>("HRSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HRSettingsId"));

                    b.Property<double?>("BreakHours")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("RetirementAge")
                        .HasColumnType("int");

                    b.Property<bool>("SendBirthdaysReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("SendInterviewFeedbackReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("SendInterviewReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("SendWorkAnniversariesReminder")
                        .HasColumnType("bit");

                    b.Property<double?>("StandardWorkingHours")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HRSettingsId");

                    b.ToTable("HRSettings");

                    b.HasData(
                        new
                        {
                            HRSettingsId = 1,
                            BreakHours = 60.0,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            RetirementAge = 60,
                            SendBirthdaysReminder = true,
                            SendInterviewFeedbackReminder = true,
                            SendInterviewReminder = true,
                            SendWorkAnniversariesReminder = true,
                            StandardWorkingHours = 9.0
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DesignationId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.EmployeeGrade", b =>
                {
                    b.Property<int>("EmployeeGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeGradeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeGradeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeGradeId");

                    b.ToTable("EmployeeGrades");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmploymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 10000L);

                    b.Property<int?>("ApplicationId1")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationId1");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Applications",
                            AreaName = "Application",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6009),
                            Deleted = false,
                            IconImageUrl = "/appstatic/images/applications.png",
                            IsGroup = true,
                            Url = "/Application/Applications/InstalledApps"
                        },
                        new
                        {
                            ApplicationId = 2,
                            ApplicationName = "Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6014),
                            Deleted = false,
                            IconImageUrl = "/appstatic/images/setup.png",
                            IsGroup = true,
                            Url = "/Setup/Setup/Dashboard"
                        },
                        new
                        {
                            ApplicationId = 3,
                            ApplicationName = "Company Settings",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6016),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 4,
                            ApplicationName = "Company",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6017),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/CompanyDetails/CompanyDetailsView"
                        },
                        new
                        {
                            ApplicationId = 5,
                            ApplicationName = "Letter Head",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6019),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/LetterHead/LetterHeadView"
                        },
                        new
                        {
                            ApplicationId = 6,
                            ApplicationName = "User",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6020),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 7,
                            ApplicationName = "User List",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6022),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 6,
                            Url = "/Setup/User/UserList"
                        },
                        new
                        {
                            ApplicationId = 8,
                            ApplicationName = "Email Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6067),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 9,
                            ApplicationName = "Domain",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6068),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailDomain/EmailDomainView"
                        },
                        new
                        {
                            ApplicationId = 10,
                            ApplicationName = "Email Account",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6070),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailAccount/EmailAccountView"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.InstalledApplication", b =>
                {
                    b.Property<int>("InstalledApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstalledApplicationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("InstalledApplicationId");

                    b.ToTable("InstalledApplications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.Property<long>("RoleAndApplicationWisePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleAndApplicationWisePermissionId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleAndApplicationWisePermissionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAndApplicationWisePermissions");

                    b.HasData(
                        new
                        {
                            RoleAndApplicationWisePermissionId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6614),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6619),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6621),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6622),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6623),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6624),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6625),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6627),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6628),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(6629),
                            Deleted = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CompleteMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("EffortHourRequired")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedCost")
                        .HasColumnType("float");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectManager")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("SalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectManager");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectActivityType", b =>
                {
                    b.Property<int>("ProjectActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectActivityTypeId"));

                    b.Property<int?>("ActivityCategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProjectActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectActivityTypeId");

                    b.ToTable("ProjectActivityTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectEmployee", b =>
                {
                    b.Property<long>("ProjectEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectEmployeeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResourceReleased")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResourceReleseDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.Property<long?>("ProjectTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("ProjectTaskId"));

                    b.Property<long?>("AssignedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ComplitedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ComplitedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DelayApprovalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DelayApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DelayApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpectedTimeInHours")
                        .HasColumnType("float");

                    b.Property<int?>("IsDelayApproved")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Progress")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TaskComplitedByOthersReasonByAssign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskComplitedByOthersReasonByComplitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalBillableHourByTimeSheet")
                        .HasColumnType("float");

                    b.Property<double?>("TotalHoursByTimeSheet")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectTaskId");

                    b.HasIndex("ComplitedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProjectTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectUser", b =>
                {
                    b.Property<long>("ProjectUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectUserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TaskAssignment", b =>
                {
                    b.Property<long>("TaskAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskAssignmentId"));

                    b.Property<DateTime?>("ActualCompliteOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AssignedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CompliteBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DelayApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DelayApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDelayApproved")
                        .HasColumnType("bit");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskAssignmentId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CompliteBy");

                    b.HasIndex("DelayApprovedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignment");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Timesheet", b =>
                {
                    b.Property<long?>("TimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("TimesheetId"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DurationInHours")
                        .HasColumnType("float");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<double?>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("bit");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeSheetApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSheetApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeSheetApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeSheetForDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesheetActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("TimesheetApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimesheetId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TimesheetActivityType");

                    b.HasIndex("TimesheetApprovedBy");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TimesheetActivityCategory", b =>
                {
                    b.Property<int>("TimesheetActivityCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimesheetActivityCategoryId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TimesheetActivityCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimesheetActivityCategoryId");

                    b.ToTable("TimesheetActivityCategories");

                    b.HasData(
                        new
                        {
                            TimesheetActivityCategoryId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7623),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Project Work"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7626),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Counselling /Discussion"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7627),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Documentation/Report/Policy/SOP/MIS"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7628),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Event Management & Participation"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7629),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Imaginar"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7631),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Interviews"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7632),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Project & Process Audit"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7633),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Review & Monitor/Report Analysis/Meetings"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7634),
                            Deleted = false,
                            TimesheetActivityCategoryName = "RFP Response"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7635),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Project Work"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 11,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7636),
                            Deleted = false,
                            TimesheetActivityCategoryName = "R&D"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 12,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7637),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Project (CSR)"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 13,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7638),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Project (Product)"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 14,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7639),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Townhall"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 15,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7640),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Quality Review"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 16,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7641),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Performance Assessment"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 17,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7642),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Induction/knowledge sharing"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 18,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7643),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Training & Capacity Building"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 19,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7645),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Annual function"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 20,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7646),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Meetings & Reviews"
                        },
                        new
                        {
                            TimesheetActivityCategoryId = 21,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(7647),
                            Deleted = false,
                            TimesheetActivityCategoryName = "Travel for office Tour"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.Candidate", b =>
                {
                    b.Property<long>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CandidateId"));

                    b.Property<int?>("ApplicationSourceId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentEmployer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CurrentSalary")
                        .HasColumnType("float");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ExpectedSalary")
                        .HasColumnType("float");

                    b.Property<double?>("ExperienceinYears")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CandidateId");

                    b.HasIndex("ApplicationSourceId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.CandidateSkill", b =>
                {
                    b.Property<int>("CandidateSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateSkillId"));

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CandidateSkillId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterFeedBackQuestions", b =>
                {
                    b.Property<int>("InterFeedBackQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterFeedBackQuestionsId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DesignationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("InterviewRoundId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterFeedBackQuestionsId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("InterviewRoundId");

                    b.ToTable("InterFeedBackQuestions");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewFeedbackAnswer", b =>
                {
                    b.Property<long>("InterviewFeedbackAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InterviewFeedbackAnswerId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("InterFeedBackQuestionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("InterviewPanelId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewFeedbackAnswerId");

                    b.ToTable("InterviewFeedbackAnswers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewPanel", b =>
                {
                    b.Property<long>("InterviewPanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InterviewPanelId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FeedBackSubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InetrviewStatus")
                        .HasColumnType("int");

                    b.Property<long>("InterviewScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewPanelId");

                    b.ToTable("InterviewPanels");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewPanelMember", b =>
                {
                    b.Property<int>("InterviewPanelMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewPanelMemberId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<int>("InterviewRoundId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewPanelMemberId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterviewRoundId");

                    b.ToTable("InterviewPanelMembers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewRound", b =>
                {
                    b.Property<int>("InterviewRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewRoundId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("InterviewRoundName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewRoundOrder")
                        .HasColumnType("int");

                    b.Property<int>("InterviewTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewRoundId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("InterviewTypeId");

                    b.ToTable("InterviewRounds");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewSchedule", b =>
                {
                    b.Property<long>("InterviewScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InterviewScheduleId"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<long>("ScheduledBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduledOff")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewScheduleId");

                    b.ToTable("InterviewSchedules");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewType", b =>
                {
                    b.Property<int>("InterviewTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("InterviewTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewTypeId");

                    b.ToTable("InterviewTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobApplication", b =>
                {
                    b.Property<long>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobApplicationId"));

                    b.Property<string>("ApplicationViewToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobApplicationSource", b =>
                {
                    b.Property<int>("JobApplicationSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobApplicationSourceId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobApplicationSourceId");

                    b.ToTable("JobApplicationSources");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobApplicationStatus", b =>
                {
                    b.Property<long>("JobApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobApplicationStatusId"));

                    b.Property<long?>("ClientContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("JobApplicationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusUpBy")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobApplicationStatusId");

                    b.HasIndex("ClientContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobApplicationId");

                    b.ToTable("JobApplicationStatuses");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpening", b =>
                {
                    b.Property<int>("JobOpeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobOpeningId"));

                    b.Property<double?>("ActualRevenue")
                        .HasColumnType("float");

                    b.Property<string>("Benefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double?>("ExpectedRevenue")
                        .HasColumnType("float");

                    b.Property<long>("HiringManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobOpType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberofPositions")
                        .HasColumnType("int");

                    b.Property<bool>("PublishOnWebsite")
                        .HasColumnType("bit");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RevenuePerPosition")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobOpeningId");

                    b.HasIndex("ClientID");

                    b.HasIndex("ContactId");

                    b.HasIndex("HiringManagerId");

                    b.ToTable("JobOpenings");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpeningSkill", b =>
                {
                    b.Property<long>("JobOpeningSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobOpeningSkillId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobOpeningSkillId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobOpeningSkills");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpeningTag", b =>
                {
                    b.Property<long>("JobOpeningTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobOpeningTagId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobOpeningTagId");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("JobOpeningTags");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClient", b =>
                {
                    b.Property<int>("RecruitClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecruitClientId"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AccountManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecruitClientId");

                    b.HasIndex("AccountManagerId");

                    b.ToTable("RecruitClients");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClientContact", b =>
                {
                    b.Property<long>("RecruitClientContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecruitClientContactId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecruitClientId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RecruitClientContactId");

                    b.HasIndex("RecruitClientId");

                    b.ToTable("RecruitClientContacts");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClientDocument", b =>
                {
                    b.Property<long>("RecruitClientDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecruitClientDocumentId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecruitClientId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RecruitClientDocumentId");

                    b.HasIndex("RecruitClientId");

                    b.ToTable("RecruitClientDocuments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.SkillSet", b =>
                {
                    b.Property<int>("SkillSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillSetId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("SkillDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SkillSetId");

                    b.ToTable("SkillSets");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.StaffingPlan", b =>
                {
                    b.Property<int>("StaffingPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffingPlanId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffingPlanId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("StaffingPlans");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.StaffingPlanDetails", b =>
                {
                    b.Property<int>("StaffingPlanDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffingPlanDetailsId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<double?>("EstimatedCostPerPosition")
                        .HasColumnType("float");

                    b.Property<int>("NoOfVacancies")
                        .HasColumnType("int");

                    b.Property<int?>("StaffingPlanId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffingPlanDetailsId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("StaffingPlanId");

                    b.ToTable("StaffingPlanDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.RefreshToken", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefreshTokenId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(3760),
                            Deleted = false,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpirey")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2023, 10, 9, 10, 33, 44, 206, DateTimeKind.Local).AddTicks(5211),
                            Deleted = false,
                            Email = "admin@appman.in",
                            FirstName = "Administrator",
                            IsActive = true,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "",
                            Password = "r9NmU79/NE0x0el2cuI8PeI4GlVCdpOeB875sWPUeJw=",
                            PhoneNo = "9583000000",
                            UserType = 1,
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.Property<int>("UserRoleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleMappingId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleMappingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings");

                    b.HasData(
                        new
                        {
                            UserRoleMappingId = 1,
                            RoleId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", "Parent")
                        .WithMany("Subordinates")
                        .HasForeignKey("ParentAccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.AttendanceRequest", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.EmployeeAttendance", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.EmployeeCheckIn", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Attendance.WorkFromHomeRequest", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Comunication.EmailDomain", "EmailDomain")
                        .WithMany()
                        .HasForeignKey("Domain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDomain");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Custom.Customer", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("AccountManagerId");

                    b.HasOne("CloudVOffice.Core.Domain.Custom.CustomerGroup", "CustomerGroup")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopKeyStroke", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", "DesktopActivityLog")
                        .WithMany("DesktopKeyStrokes")
                        .HasForeignKey("DesktopActivityLogId");

                    b.Navigation("DesktopActivityLog");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopLogin", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopSnapshot", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", "DesktopActivityLog")
                        .WithMany("DesktopSnapshots")
                        .HasForeignKey("DesktopActivityLogId");

                    b.Navigation("DesktopActivityLog");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.RestrictedApplication", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.RestrictedWebsite", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.HolidayDays", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Attendance.Holiday", "Holiday")
                        .WithMany("HolidayDays")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicy", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.EmployeeGrade", "EmployeeGrade")
                        .WithMany()
                        .HasForeignKey("EmployeeGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Attendance.LeavePeriod", "LeavePeriod")
                        .WithMany()
                        .HasForeignKey("LeavePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeGrade");

                    b.Navigation("LeavePeriod");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicyDetails", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicy", null)
                        .WithMany("LeavePolicyDetails")
                        .HasForeignKey("LeavePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Attendance.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.ShiftEmployee", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Attendance.ShiftType", "ShiftType")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("Employee");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.Employee", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Emp.EmployeeEducationalQualification", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", null)
                        .WithMany("Children")
                        .HasForeignKey("DepartmentId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", null)
                        .WithMany("Children")
                        .HasForeignKey("ApplicationId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("RoleAndModuleWisePermission")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("RoleAndApplicationWisePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ProjectManager");

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectEmployee", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ComplitedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectUser", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.TaskAssignment", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeAssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeCompliteBy")
                        .WithMany()
                        .HasForeignKey("CompliteBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "EmployeeDelayApprovedBy")
                        .WithMany()
                        .HasForeignKey("DelayApprovedBy");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectTask", "ProjectTask")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeAssignedBy");

                    b.Navigation("EmployeeCompliteBy");

                    b.Navigation("EmployeeDelayApprovedBy");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Timesheet", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectActivityType", "ProjectActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("CloudVOffice.Core.Domain.Projects.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("CloudVOffice.Core.Domain.Projects.TimesheetActivityCategory", "TimesheetActivityCategory")
                        .WithMany()
                        .HasForeignKey("TimesheetActivityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "TimesheetApprovedByEmployeeId")
                        .WithMany()
                        .HasForeignKey("TimesheetApprovedBy");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("ProjectActivityType");

                    b.Navigation("ProjectTask");

                    b.Navigation("TimesheetActivityCategory");

                    b.Navigation("TimesheetApprovedByEmployeeId");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.Candidate", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.JobApplicationSource", "JobApplicationSource")
                        .WithMany()
                        .HasForeignKey("ApplicationSourceId");

                    b.Navigation("JobApplicationSource");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.CandidateSkill", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.Candidate", null)
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.SkillSet", "SkillSet")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterFeedBackQuestions", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.InterviewRound", "InterviewRound")
                        .WithMany()
                        .HasForeignKey("InterviewRoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("InterviewRound");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewPanelMember", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.InterviewRound", "InterviewRound")
                        .WithMany()
                        .HasForeignKey("InterviewRoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("InterviewRound");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.InterviewRound", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.InterviewType", "InterviewType")
                        .WithMany()
                        .HasForeignKey("InterviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("InterviewType");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobApplication", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.JobOpening", "JobOpening")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Employee");

                    b.Navigation("JobOpening");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobApplicationStatus", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.RecruitClientContact", "RecruitClientContact")
                        .WithMany()
                        .HasForeignKey("ClientContactId");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.JobApplication", "JobApplication")
                        .WithMany()
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("JobApplication");

                    b.Navigation("RecruitClientContact");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpening", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.RecruitClient", "RecruitClient")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.RecruitClientContact", "RecruitClientContact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("HiringManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RecruitClient");

                    b.Navigation("RecruitClientContact");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpeningSkill", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.JobOpening", "JobOpening")
                        .WithMany("JobOpeningSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.SkillSet", "SkillSet")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOpening");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpeningTag", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.JobOpening", "JobOpening")
                        .WithMany("JobOpeningTags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("JobOpening");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClient", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Emp.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClientContact", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.RecruitClient", "RecruitClient")
                        .WithMany()
                        .HasForeignKey("RecruitClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitClient");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClientDocument", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.RecruitClient", "RecruitClient")
                        .WithMany("RecruitClientDocuments")
                        .HasForeignKey("RecruitClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitClient");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.StaffingPlan", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.StaffingPlanDetails", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.HR.Master.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Recruitment.StaffingPlan", null)
                        .WithMany("StaffingPlanDetails")
                        .HasForeignKey("StaffingPlanId");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Accounts.ChartOfAccounts", b =>
                {
                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DesktopMonitoring.DesktopActivityLog", b =>
                {
                    b.Navigation("DesktopKeyStrokes");

                    b.Navigation("DesktopSnapshots");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.Holiday", b =>
                {
                    b.Navigation("HolidayDays");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Attendance.LeavePolicy", b =>
                {
                    b.Navigation("LeavePolicyDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.HR.Master.Department", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleAndModuleWisePermission");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.Project", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Projects.ProjectTask", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.Candidate", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.JobOpening", b =>
                {
                    b.Navigation("JobOpeningSkills");

                    b.Navigation("JobOpeningTags");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.RecruitClient", b =>
                {
                    b.Navigation("RecruitClientDocuments");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Recruitment.StaffingPlan", b =>
                {
                    b.Navigation("StaffingPlanDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Navigation("RoleAndApplicationWisePermission");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoleMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
