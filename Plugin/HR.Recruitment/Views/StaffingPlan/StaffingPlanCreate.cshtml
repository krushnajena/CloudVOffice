@model CloudVOffice.Data.DTO.Recruitment.StaffingPlanDTO;
@using System.Collections;
@using Newtonsoft.Json;
@{
	Layout = "_MainAppLayout";
	ViewData["Title"] = "StaffingPlan";
	var DepartmentList = new SelectList((IEnumerable)ViewBag.Department, "DepartmentId", "DepartmentName");

	var StaffingPlanDetails = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.Users, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "EmployeeId", Text = "FullName" }, Change = "onChange" };

}
@addTagHelper *, Syncfusion.EJ2
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<header class="main-heading">
	<div class="container-fluid">
		<div class="row">
			<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
				<div class="page-icon">
					<i class="icon-laptop_windows"></i>
				</div>
				<div class="page-title">
					<h5>Staffing Plan</h5>
					
				</div>
			</div>
			<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
				<div class="right-actions">
					<span class="last-login"></span>
				</div>
			</div>
		</div>
	</div>
</header>
<div class="main-content">
	<div class="row gutters">
		<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">

			<div class="card">
				<form asp-route="/Recruitment/StaffingPlan/StaffingPlanCreate" method="post" autocomplete="off">
					<div asp-validation-summary="ModelOnly" class="message-error"></div>


					<div class="card-header"><b>Staffing Plan</b></div>
					<div class="card-body">
						<div class="form-row">
							<div class="form-group col-md-4">
								<input asp-for="@Model.StaffingPlanId" type="hidden" />
								<label for="PlanName" class="form-label">Plan Name</label>
								<input asp-for="@Model.PlanName" type="text" class="form-control" autofocus="autofocus" placeholder="Plan Name" />
								<span asp-validation-for="PlanName"></span>
							</div>
							<div class="form-group col-md-4">
								<label for="DepartmentId" class="form-label">Department</label>
								<ejs-dropdownlist id="DepartmentId" allowFiltering="true" ejs-for="@Model.DepartmentId" filtering="onDepartmentrfiltering" dataSource="@(new SelectList((IEnumerable)ViewBag.Department, "DepartmentId", "DepartmentName").Items)" placeholder="Select Department" popupHeight="220px">
									<e-dropdownlist-fields text="DepartmentName" value="DepartmentId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="DepartmentId"></span>
							</div>
							
						</div>
						<div class="form-row">
							<div class="form-group col-md-4">
								<label for="FromDate" class="form-label">From Date</label>
								<input asp-for="@Model.FromDate" type="date" class="form-control" autofocus="autofocus" placeholder="From Date" />
								<span asp-validation-for="FromDate"></span>
							</div>
							<div class="form-group col-md-4">
								<label for="ToDate" class="form-label">To Date</label>
								<input asp-for="@Model.ToDate" type="date" class="form-control" autofocus="autofocus" placeholder="To Date" />
								<span asp-validation-for="ToDate"></span>
							</div>
							
						</div>

						<div class="card-header"><b>Staffing Plan Details</b></div>
						<div class="form-group col-md-12">
							<label for="EstimatedCost" class="form-label">Staffing Plan Details</label>
							<input type="hidden" asp-for="@Model.StaffingPlanDetailsString" id="StaffingPlanDetailsString" />
							<ejs-grid id="GridUsers" actionComplete="actionCompleteUser" actionBegin="actionBeginUsers" dataSource="@Model.StaffingPlanDetails" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
								<e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" newRowPosition="Top"></e-grid-editSettings>

								<e-grid-columns>
									<e-grid-column field="EmployeeId" Visible="false" foreignKeyField="EmployeeId" headerText="Full Name" edit="new {@@params = StaffingPlanDetails }" editType="dropdownedit" width="140"></e-grid-column>
									<e-grid-column field="FullName" foreignKeyField="EmployeeId" headerText="Employee Name" width="140"></e-grid-column>
								</e-grid-columns>
							</ejs-grid>


						</div>
					</div>

					<div class="card-body">

						<div class="col-lg-2 col-md-2 col-sm-12">
							<button type="submit" class="btn btn-primary">Save</button>
						</div>
					</div>

				</form>

			</div>



		</div>
	</div>

</div>
<script>

	

	function onDepartmentrfiltering(e) {
		var query = new ej.data.Query();
		query = (e.text !== '') ? query.where('DepartmentName', 'startswith', e.text, true) : query;
		e.updateData(@Html.Raw(JsonConvert.SerializeObject(ViewBag.Department)), query);
	}


</script>

<script>
		var employeeName = '';
	function onChange(args) {

		employeeName = args.itemData.FullName;
	}


	function actionBeginUsers(args) {
		let grid = document.getElementById("GridUsers").ej2_instances[0];

		
		if (args.requestType === 'save') {
			args.data.FullName = employeeName
			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "EmployeeId") {
					grid.columns[i].visible = false

				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = true
				}

			}

		}
		else if (args.requestType === 'add' || args.requestType === 'beginEdit') {

			for (var i = 0; i < grid.columns.length; i++) {
				if (grid.columns[i].field == "EmployeeId") {
					grid.columns[i].visible = true;
				}
				if (grid.columns[i].field == "FullName") {
					grid.columns[i].visible = false
				}

			}

		}
	}

	function actionCompleteUser(args) {
		if (args.requestType === 'save' || args.requestType === 'delete') {
			let grid = document.getElementById("GridUsers").ej2_instances[0];

			$('#StaffingPlanDetailsString').val(JSON.stringify(grid.currentViewData));
		}

	}

</script>